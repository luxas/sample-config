// +build !ignore_autogenerated

// Code generated by conversion-gen. DO NOT EDIT.

package v1beta1

import (
	config "github.com/luxas/sample-config/pkg/apis/config"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	configv1alpha1 "k8s.io/component-base/config/v1alpha1"
	v1alpha1 "k8s.io/component-base/config/v1alpha1"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*MyAppConfiguration)(nil), (*config.MyAppConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_MyAppConfiguration_To_config_MyAppConfiguration(a.(*MyAppConfiguration), b.(*config.MyAppConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*config.MyAppConfiguration)(nil), (*MyAppConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_MyAppConfiguration_To_v1beta1_MyAppConfiguration(a.(*config.MyAppConfiguration), b.(*MyAppConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*config.MyAppConfiguration)(nil), (*MyAppConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_MyAppConfiguration_To_v1beta1_MyAppConfiguration(a.(*config.MyAppConfiguration), b.(*MyAppConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MyAppConfiguration)(nil), (*config.MyAppConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_MyAppConfiguration_To_config_MyAppConfiguration(a.(*MyAppConfiguration), b.(*config.MyAppConfiguration), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1beta1_MyAppConfiguration_To_config_MyAppConfiguration(in *MyAppConfiguration, out *config.MyAppConfiguration, s conversion.Scope) error {
	if err := v1alpha1.Convert_v1alpha1_ClientConnectionConfiguration_To_config_ClientConnectionConfiguration(&in.ClientConnection, &out.ClientConnection, s); err != nil {
		return err
	}
	if err := configv1alpha1.Convert_v1alpha1_LeaderElectionConfiguration_To_config_LeaderElectionConfiguration(&in.LeaderElection, &out.LeaderElection, s); err != nil {
		return err
	}
	// WARNING: in.ServerAddress requires manual conversion: does not exist in peer-type
	// WARNING: in.HTTPSPort requires manual conversion: does not exist in peer-type
	// WARNING: in.TLSConfig requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_config_MyAppConfiguration_To_v1beta1_MyAppConfiguration(in *config.MyAppConfiguration, out *MyAppConfiguration, s conversion.Scope) error {
	if err := v1alpha1.Convert_config_ClientConnectionConfiguration_To_v1alpha1_ClientConnectionConfiguration(&in.ClientConnection, &out.ClientConnection, s); err != nil {
		return err
	}
	if err := configv1alpha1.Convert_config_LeaderElectionConfiguration_To_v1alpha1_LeaderElectionConfiguration(&in.LeaderElection, &out.LeaderElection, s); err != nil {
		return err
	}
	// WARNING: in.Server requires manual conversion: does not exist in peer-type
	return nil
}
